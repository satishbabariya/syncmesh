syntax = "proto3";

package proto;

option go_package = "github.com/satishbabariya/syncmesh/pkg/proto";

// Cluster service for node coordination and management
service Cluster {
    // Join the cluster
    rpc JoinCluster(JoinClusterRequest) returns (JoinClusterResponse);
    
    // Leave the cluster
    rpc LeaveCluster(LeaveClusterRequest) returns (LeaveClusterResponse);
    
    // Get cluster status
    rpc GetClusterStatus(GetClusterStatusRequest) returns (GetClusterStatusResponse);
    
    // Stream cluster events
    rpc StreamClusterEvents(StreamClusterEventsRequest) returns (stream ClusterEvent);
}

// Request to join cluster
message JoinClusterRequest {
    string node_id = 1;
    string address = 2;
    string version = 3;
    map<string, string> metadata = 4;
}

// Response for join cluster request
message JoinClusterResponse {
    bool success = 1;
    string message = 2;
    string leader_id = 3;
    repeated ClusterNode nodes = 4;
}

// Request to leave cluster
message LeaveClusterRequest {
    string node_id = 1;
    string reason = 2;
}

// Response for leave cluster request
message LeaveClusterResponse {
    bool success = 1;
    string message = 2;
}

// Request for cluster status
message GetClusterStatusRequest {
    bool include_details = 1;
}

// Response for cluster status
message GetClusterStatusResponse {
    string leader_id = 1;
    repeated ClusterNode nodes = 2;
    int32 total_nodes = 3;
    int32 active_nodes = 4;
    ClusterHealth health = 5;
}

// Request to stream cluster events
message StreamClusterEventsRequest {
    repeated string event_types = 1;
}

// Cluster node information
message ClusterNode {
    string node_id = 1;
    string address = 2;
    string status = 3; // active, inactive, failed
    bool is_leader = 4;
    string version = 5;
    int64 last_seen = 6;
    int64 joined_at = 7;
    map<string, string> metadata = 8;
}

// Cluster event
message ClusterEvent {
    string type = 1; // node-join, node-leave, leader-change, heartbeat
    string node_id = 2;
    int64 timestamp = 3;
    map<string, string> data = 4;
}

// Cluster health information
message ClusterHealth {
    string status = 1; // healthy, degraded, unhealthy
    repeated HealthCheck checks = 2;
    int64 last_check = 3;
}

// Health check result
message HealthCheck {
    string name = 1;
    string status = 2; // healthy, unhealthy, unknown
    string message = 3;
    int64 last_check = 4;
    int64 duration_ms = 5;
}
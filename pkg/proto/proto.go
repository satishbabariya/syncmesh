// Code generated by protoc-gen-go. DO NOT EDIT.
// SyncMesh Protocol Buffer Definitions
package proto

import (
	"context"
)

// Mock implementations for protocol buffers
// In a real implementation, these would be generated from .proto files

// FileSync service interface
type UnimplementedFileSyncServer struct{}

func (UnimplementedFileSyncServer) SyncFile(ctx interface{}, req *SyncFileRequest) (*SyncFileResponse, error) {
	return nil, nil
}

func (UnimplementedFileSyncServer) GetFileStatus(ctx interface{}, req *GetFileStatusRequest) (*GetFileStatusResponse, error) {
	return nil, nil
}

func (UnimplementedFileSyncServer) StreamFileData(stream interface{}) error {
	return nil
}

func (UnimplementedFileSyncServer) WatchFiles(req *WatchFilesRequest, stream interface{}) error {
	return nil
}

// Cluster service interface
type UnimplementedClusterServer struct{}

func (UnimplementedClusterServer) JoinCluster(ctx interface{}, req *JoinClusterRequest) (*JoinClusterResponse, error) {
	return nil, nil
}

func (UnimplementedClusterServer) LeaveCluster(ctx interface{}, req *LeaveClusterRequest) (*LeaveClusterResponse, error) {
	return nil, nil
}

func (UnimplementedClusterServer) GetClusterStatus(ctx interface{}, req *GetClusterStatusRequest) (*GetClusterStatusResponse, error) {
	return nil, nil
}

func (UnimplementedClusterServer) StreamClusterEvents(req *StreamClusterEventsRequest, stream interface{}) error {
	return nil
}

// Message types - normally generated from proto files
type SyncFileRequest struct {
	FilePath  string
	Operation string
	Data      []byte
	Checksum  string
	Size      int64
	ModTime   int64
	FromNode  string
	Version   uint64
	Metadata  map[string]string
}

type SyncFileResponse struct {
	Success   bool
	Message   string
	ErrorCode string
	Version   uint64
}

type GetFileStatusRequest struct {
	FilePath string
}

type GetFileStatusResponse struct {
	Exists   bool
	Size     int64
	Checksum string
	ModTime  int64
	Version  uint64
	Status   string
	Metadata map[string]string
}

type FileChunk struct {
	FileName    string
	ChunkNumber int32
	Data        []byte
	Checksum    string
	IsLast      bool
	TotalSize   int64
}

type StreamFileResponse struct {
	Success      bool
	Message      string
	BytesWritten int64
	ErrorCode    string
}

type WatchFilesRequest struct {
	Patterns        []string
	IncludeExisting bool
}

type FileEvent struct {
	FilePath  string
	Operation string
	Timestamp int64
	Size      int64
	Checksum  string
	Version   uint64
	Metadata  map[string]string
}

type JoinClusterRequest struct {
	NodeId   string
	Address  string
	Version  string
	Metadata map[string]string
}

type JoinClusterResponse struct {
	Success  bool
	Message  string
	LeaderId string
	Nodes    []*ClusterNode
}

type LeaveClusterRequest struct {
	NodeId string
	Reason string
}

type LeaveClusterResponse struct {
	Success bool
	Message string
}

type GetClusterStatusRequest struct {
	IncludeDetails bool
}

type GetClusterStatusResponse struct {
	LeaderId    string
	Nodes       []*ClusterNode
	TotalNodes  int32
	ActiveNodes int32
	Health      *ClusterHealth
}

type StreamClusterEventsRequest struct {
	EventTypes []string
}

type ClusterNode struct {
	NodeId    string
	Address   string
	Status    string
	IsLeader  bool
	Version   string
	LastSeen  int64
	JoinedAt  int64
	Metadata  map[string]string
}

type ClusterEvent struct {
	Type      string
	NodeId    string
	Timestamp int64
	Data      map[string]string
}

type ClusterHealth struct {
	Status    string
	Checks    []*HealthCheck
	LastCheck int64
}

type HealthCheck struct {
	Name       string
	Status     string
	Message    string
	LastCheck  int64
	DurationMs int64
}

// Service registration functions (normally generated)
func RegisterFileSyncServer(s interface{}, srv interface{}) {}
func RegisterClusterServer(s interface{}, srv interface{}) {}

// Client interfaces (normally generated)
type FileSync_StreamFileDataServer interface {
	Recv() (*FileChunk, error)
	SendAndClose(*StreamFileResponse) error
}

type FileSync_WatchFilesServer interface {
	Send(*FileEvent) error
	Context() context.Context
}

type Cluster_StreamClusterEventsServer interface {
	Send(*ClusterEvent) error
	Context() context.Context
}
syntax = "proto3";

package proto;

option go_package = "github.com/satishbabariya/syncmesh/pkg/proto";

// FileSync service for file synchronization between nodes
service FileSync {
    // Sync a file to this node
    rpc SyncFile(SyncFileRequest) returns (SyncFileResponse);
    
    // Get status of a specific file
    rpc GetFileStatus(GetFileStatusRequest) returns (GetFileStatusResponse);
    
    // Stream file data for large files
    rpc StreamFileData(stream FileChunk) returns (StreamFileResponse);
    
    // Watch for file changes
    rpc WatchFiles(WatchFilesRequest) returns (stream FileEvent);
}

// Request to sync a file
message SyncFileRequest {
    string file_path = 1;
    string operation = 2; // create, modify, delete
    bytes data = 3;
    string checksum = 4;
    int64 size = 5;
    int64 mod_time = 6;
    string from_node = 7;
    uint64 version = 8;
    map<string, string> metadata = 9;
}

// Response for sync file request
message SyncFileResponse {
    bool success = 1;
    string message = 2;
    string error_code = 3;
    uint64 version = 4;
}

// Request to get file status
message GetFileStatusRequest {
    string file_path = 1;
}

// Response for get file status
message GetFileStatusResponse {
    bool exists = 1;
    int64 size = 2;
    string checksum = 3;
    int64 mod_time = 4;
    uint64 version = 5;
    string status = 6; // synced, pending, conflict
    map<string, string> metadata = 7;
}

// File chunk for streaming large files
message FileChunk {
    string file_name = 1;
    int32 chunk_number = 2;
    bytes data = 3;
    string checksum = 4;
    bool is_last = 5;
    int64 total_size = 6;
}

// Response for file streaming
message StreamFileResponse {
    bool success = 1;
    string message = 2;
    int64 bytes_written = 3;
    string error_code = 4;
}

// Request to watch files
message WatchFilesRequest {
    repeated string patterns = 1;
    bool include_existing = 2;
}

// File event for watching
message FileEvent {
    string file_path = 1;
    string operation = 2; // create, modify, delete
    int64 timestamp = 3;
    int64 size = 4;
    string checksum = 5;
    uint64 version = 6;
    map<string, string> metadata = 7;
}